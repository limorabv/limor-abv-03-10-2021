{"version":3,"sources":["components/MainHeader.module.css","store/index.js","utils.js","UI/Card.js","components/Forcast.js","components/CurrentCity.js","pages/Home.js","pages/Favorites.js","components/MainHeader.js","App.js","index.js"],"names":["module","exports","currentCitySlice","createSlice","name","initialState","cityName","cityId","currWeather","temperature","imperial","metric","weatherIcon","weatherText","reducers","updateCurrentCity","state","action","payload","updateCurrentWeather","favoritesSlice","favList","addFavorite","push","removeFavorite","index","findIndex","favorite","id","splice","store","configureStore","reducer","currentCity","favorites","favoritesActions","actions","currentCityActions","KEY","Card","props","classes","className","children","Forcast","useState","forcast","setForcast","fetchForcast","a","fetch","forcastResponse","json","forcastData","DailyForecasts","toast","error","parseDate","dateString","date","Date","parse","console","log","dateObject","UTC","toLocaleString","weekday","useEffect","map","forcastItem","Temperature","Minimum","Value","src","String","Day","Icon","padStart","IconPhrase","EpochDate","configure","CurrenCity","dispatch","useDispatch","currentCityName","useSelector","currentWeather","currCityId","params","useParams","history","useHistory","isFavorite","find","fetchCity","currCityResponse","currCityJson","Key","LocalizedName","fetchCurrWeather","currWeatherResponse","currentWeatherJson","WeatherText","WeatherIcon","Imperial","Metric","success","position","latitude","coords","longitude","cityResponse","cityJson","navigator","geolocation","getCurrentPosition","fetchData","onSubmit","e","preventDefault","type","onClick","searchedName","document","querySelector","value","class","currentTemp","Home","Favorites","favoriteItem","to","MainHeader","header","activeClassName","acwtive","exact","active","App","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5efaa09d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainHeader_header__3jG-X\",\"active\":\"MainHeader_active__11wpQ\"};","import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst currentCitySlice = createSlice ({\n    name: 'currentCity',\n    initialState: {cityName: '', cityId: '',  currWeather: {temperature: {imperial: null, metric: null}, weatherIcon: null, weatherText: ''}},\n    reducers: {\n        updateCurrentCity(state, action){\n            state.cityName = action.payload.cityName;\n            state.cityId = action.payload.cityId;\n        },\n\n        updateCurrentWeather(state, action){\n            state.currWeather.weatherText = action.payload.weatherText;\n            state.currWeather.weatherIcon = action.payload.weatherIcon;\n            state.currWeather.temperature.imperial = action.payload.imperial;\n            state.currWeather.temperature.metric = action.payload.metric;\n        }\n\n    }\n});\n\n\nconst favoritesSlice = createSlice({\n    name: 'favorites',\n    initialState: {favList: []},\n    reducers: {\n        addFavorite(state, action){\n            state.favList.push(action.payload);\n        },\n        removeFavorite(state, action){\n            const index = state.favList.findIndex( favorite => favorite.id === action.payload);\n            state.favList.splice(index, 1);\n        }\n    }\n    \n});\n\nconst store = configureStore({\n    reducer: {  currentCity: currentCitySlice.reducer,\n                favorites: favoritesSlice.reducer\n            }\n});\n\n\nexport const favoritesActions = favoritesSlice.actions;\nexport const currentCityActions = currentCitySlice.actions;\nexport default store;\n\n","export const KEY = 'FDuD29dgrGUnnd9J2Q14p8QudfZvNB1l';\n\n\n","import './Card.css';\n\nconst Card = (props) => {\n  const classes = 'card ' + props.className;\n\n  return <div className={classes}>{props.children}</div>;\n};\n\nexport default Card;","import { useState, useEffect } from \"react\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { KEY } from '../utils'\nimport Card from '../UI/Card';\nimport './Forcast.css';\n\n\n\nconst Forcast = (props) => {\n    const [forcast, setForcast] = useState([]);\n\n    const fetchForcast = async (cityId) =>{\n        try {const forcastResponse = await fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityId}?apikey=${KEY}`);\n        const forcastData = await forcastResponse.json();\n        setForcast (forcastData.DailyForecasts);\n    } catch (error) {\n        toast.error('faild to load forcast');\n\n    }\n    }\n\n    const parseDate = (dateString) => {\n        const date = new Date (Date.parse(dateString));\n        console.log(Date.parse(dateString));\n\n        const dateObject = new Date(Date.UTC(dateString+''));\n        console.log('parse date' + dateObject);\n        return (date.toLocaleString('en-US', {weekday: 'short'}));\n\n    }\n\n    useEffect( () => {\n        fetchForcast(props.cityId);\n    }, [props.cityId])\n\n\n\n   return (\n        <ul className = 'forcast-list'>\n            {forcast.map ((forcastItem) => \n                    <Card className = 'forcast-item'>\n                        <li key = {new Date(Date.UTC(forcastItem.EpochDate))}> \n                            <p>{parseDate(forcastItem.Date)}</p>\n                            <p>{forcastItem.Temperature.Minimum.Value}<span>&#176;F</span></p>\n                            <img src = {`https://developer.accuweather.com/sites/default/files/${String(forcastItem.Day.Icon).padStart(2, '0')\n}-s.png`}></img>\n                            <p>{forcastItem.Day.IconPhrase}</p>\n                         \n                        </li>\n                    </Card>\n                        )}\n        </ul>\n    )\n}\n\nexport default Forcast;","import { useSelector } from 'react-redux';\nimport { currentCityActions, favoritesActions } from '../store/index';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport Forcast from './Forcast';\nimport { Fragment } from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { KEY } from '../utils';\nimport Card from '../UI/Card';\nimport './CurrentCity.css';\n\n\ntoast.configure();\n\nconst CurrenCity = () => {\n    const dispatch = useDispatch();\n    const currentCityName = useSelector(state => state.currentCity.cityName);\n    const currentWeather = useSelector(state => state.currentCity.currWeather);\n    const currCityId = useSelector(state => state.currentCity.cityId);\n    const favorites = useSelector( state => state.favorites.favList);\n    const params = useParams();\n    const history = useHistory();\n\n  \n    \n    let isFavorite = favorites.find( favorite => favorite.id === currCityId);\n\n    const searchClickedHandler = (e) => {\n        const searchedName = document.querySelector('#city-input').value;\n        history.push(`/city/${searchedName}`)\n      \n    }\n\n    const addFavoriteHandler = () => {\n        dispatch(favoritesActions.addFavorite({ name: currentCityName, id: currCityId, currentWeather: currentWeather.weatherText, currentTemp: currentWeather.temperature.imperial}))\n    }\n\n    const removeFavoriteHandler = () => {\n        dispatch( favoritesActions.removeFavorite(currCityId));\n    }\n\n    const fetchCity = async (name) => {\n        console.log(\"inside fetch city\");\n        try {\n            const currCityResponse = await fetch(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete/?apikey=${KEY}&q=${name}`);\n            const currCityJson = await currCityResponse.json();\n            const cityId = currCityJson[0].Key;\n\n            const cityName = currCityJson[0].LocalizedName;\n            dispatch(currentCityActions.updateCurrentCity({cityName, cityId: cityId}));\n        } catch (error){\n            toast.error('city search faild');\n            console.log('city search faild');\n        }\n    }\n\n    const fetchCurrWeather = async (cityId) => {\n\n        try { \n\n            const currWeatherResponse = await fetch (`https://dataservice.accuweather.com/currentconditions/v1/${currCityId}?apikey=${KEY}`);\n            const currentWeatherJson = await currWeatherResponse.json();\n            dispatch (currentCityActions.updateCurrentWeather({\n                weatherText: currentWeatherJson[0].WeatherText,\n                weatherIcon: currentWeatherJson[0].WeatherIcon, \n                imperial: currentWeatherJson[0].Temperature.Imperial.Value, \n                metric: currentWeatherJson[0].Temperature.Metric.Value\n        }));\n        } catch (error) {\n            toast.error('failed fetching weather');\n            console.log ('failed fetching weather');\n        }\n    }\n\n    const success = async (position) => {\n        try {const latitude  = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        console.log(`lat: ${latitude}, lon: ${longitude}`);\n        const cityResponse = await fetch(`http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?q=${latitude},${longitude}&apikey=${KEY}`)\n        const cityJson = await cityResponse.json();\n        console.log(cityJson);\n        const cityName = cityJson.LocalizedName;\n        const cityId = cityJson.Key;\n        console.log(`from sucsses func id: ${cityId}`);\n        dispatch(currentCityActions.updateCurrentCity({cityName:cityName , cityId: cityId}))\n    } catch (error){\n        console.log(error);\n        toast.error('error');\n    }\n    }\n    \n\n    if (params.name) {\n        fetchCity(params.name);\n    }\n    else {\n        if('geolocation' in navigator) {\n            /* geolocation is available */\n            navigator.geolocation.getCurrentPosition(success, () => {fetchCity('Tel Aviv')})\n          }\n    }\n\n    useEffect (() => {\n        console.log('inside use effect:' + currCityId );\n        const fetchData = async () => {\n            await fetchCurrWeather (currCityId);\n\n        }\n        fetchData();\n    }, [currentCityName, currCityId]);\n\n    console.log(currCityId);\n    \n\n\n    \n    return (\n    <Fragment>\n        <form onSubmit = { (e) => {e.preventDefault()}}> \n            <div className = 'input-container'>\n                <input type=\"search\" id = 'city-input'/>\n                <button type=\"submit\" onClick = { searchClickedHandler } > Search </button>\n            </div>\n        </form>\n        <Card className = 'city'>\n            { currentCityName &&<div>\n            <h2 class = 'city-title'>{currentCityName}</h2>\n            {console.log(currentWeather.temperature)}\n            {currentWeather && <h2>{currentWeather.temperature.imperial}<span>&#176;F</span></h2>}\n            {currentWeather && <h3>{ currentWeather.weatherText }</h3>}\n            <img src = {`https://developer.accuweather.com/sites/default/files/${String(currentWeather.weatherIcon).padStart(2, '0')\n}-s.png`}/>\n            < Forcast cityId = { currCityId } />\n            \n\n            <button className = 'fav-btn ' class=\"btn btn-success\"onClick = { isFavorite ? removeFavoriteHandler : addFavoriteHandler }>{isFavorite ? 'Remove Favorite': 'Add Favorite'}</button>\n            </div>}\n        </Card>\n    </Fragment>\n    );\n  };\n  \n  export default CurrenCity;","import CurrenCity from '../components/CurrentCity';\n\nconst Home = () => {\n    return (\n        <div>\n            <CurrenCity />\n        </div>\n        );\n  };\n  \n  export default Home;","import { useSelector, useDispatch } from 'react-redux';\nimport { favoritesActions } from '../store/index';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Favorites.css';\n\n\n\n\nconst Favorites = () => {\n  const favorites = useSelector( state => state.favorites.favList);\n  const dispatch = useDispatch();\n\n    return (\n      <Fragment>\n        <h1>The Favorites Page</h1>\n        <ul>\n          {favorites.map(favoriteItem => \n            <li className = \"favorite-item\">\n              <Link to = {`/city/${favoriteItem.name}`}> {favoriteItem.name} </Link>\n              <p>{favoriteItem.currentWeather}</p>\n\n              <button onClick = {() => {dispatch(favoritesActions.removeFavorite(favoriteItem.id))}}>remove</button>\n              \n            </li>)}\n        </ul>\n      </Fragment>  \n\n      );\n\n  };\n  \n  export default Favorites;","\nimport { NavLink } from 'react-router-dom';\n\nimport classes from './MainHeader.module.css';\n\nconst MainHeader = () => {\n  return (\n    <header className={classes.header}>\n      <nav>\n        <ul>\n          <li>\n            <NavLink activeClassName={classes.acwtive} to='/' exact>\n                Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink activeClassName={classes.active} to='/favorites'>\n                Favorites\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainHeader;","\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Favorites from './pages/Favorites';\nimport CurrenCity from './components/CurrentCity';\nimport MainHeader from './components/MainHeader';\n\nfunction App() {\n  return (\n    <div>\n      <MainHeader />\n      <main>\n        <Switch>\n        <Route path='/' exact>\n          <Home />\n        </Route>\n        <Route path='/favorites' exact>\n          <Favorites />\n        </Route>\n        <Route path = '/city/:name' exact>\n          <CurrenCity />\n        </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <BrowserRouter >\n        <Provider store={store}>\n            <App />\n        </Provider>  \n    </BrowserRouter>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}